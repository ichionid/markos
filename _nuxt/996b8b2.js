(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{430:function(t,e,r){"use strict";r.r(e);r(43),r(36),r(56),r(37),r(57);var n=r(10),o=r(24),c=r(26),l=r(81),d=(r(50),r(42),r(18),r(96),r(80),r(68),r(69),r(34),r(161),r(51),r(23)),f=r(160),h=r(30);function m(object,t){var e=Object.keys(object);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(object);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(object,t).enumerable}))),e.push.apply(e,r)}return e}var k={name:"DruxtBlock",extends:f.default,props:{id:{type:String,default:null},uuid:{type:String,default:null}},data:function(){return{resource:{}}},fetchKey:function(t){var e=["DruxtBlock",this.uuid||this.id].filter((function(t){return t}));return[].concat(Object(l.a)(e),[t(e.join(":"))]).join(":")},computed:{block:function(t){return(t.resource||{}).data}},watch:{id:function(){this.$fetch()},uuid:function(){this.$fetch()}},methods:function(t){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?m(Object(source),!0).forEach((function(e){Object(c.a)(t,e,source[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(source)):m(Object(source)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(source,e))}))}return t}({},Object(h.b)({getCollection:"druxt/getCollection",getResource:"druxt/getResource"})),druxt:{componentOptions:function(t){var e=t.block;if(!e)return[];var r=e.attributes.plugin||"",n=null;if(r.includes(":")){var c=r.split(":"),l=Object(o.a)(c,2);r=l[0],n=l[1]}var d=[];return n&&(d.push([r,n,e.attributes.region,e.attributes.theme]),d.push([r,n,e.attributes.theme])),d.push([r,e.attributes.region,e.attributes.theme]),d.push([r,e.attributes.theme]),d.push(["default"]),d},fetchConfig:function(){var t=this;return Object(n.a)(regeneratorRuntime.mark((function e(){var r,n,o,c,f;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r="block--block",n=new d.DrupalJsonApiParams,o=((t.$druxt.settings.blocks||{}).query||{}).fields,Array.isArray(o)&&n.addFields(r,[].concat(Object(l.a)(o),["plugin","region","settings","theme"])),!t.uuid){e.next=11;break}return c=t.uuid,e.next=8,t.getResource({type:r,id:c,query:n});case 8:t.resource=e.sent,e.next=17;break;case 11:if(!t.id){e.next=17;break}return n.addFilter("drupal_internal__id",t.id),e.next=15,t.getCollection({type:r,query:n});case 15:f=e.sent,t.resource={data:f.data[0]};case 17:case"end":return e.stop()}}),e)})))()},propsData:function(t){return{block:t.block}},slots:function(t){var e=this,r={default:function(){var summary="Placeholder for the '".concat(((e.block||{}).attributes||{}).drupal_internal__id,"' block."),r=[t("p","DruxtBlocks knows that a block can be rendered, and has information provided by Drupal, but not enough to automatically determine the behaviour of the block."),t("p","To render this block manually, create a Nuxt component with one of the following component options.")];return e.id||e.uuid||(summary="Missing required 'id' or 'uuid' prop.",r=[t("p","The DruxtBlock component requires either the 'id' or 'uuid' prop to be set.")]),t("DruxtDebug",{props:{summary:summary}},[t("div",r),!!e.component.options.length&&t("label",["Component options:",t("ul",e.component.options.map((function(s){return t("li",[s])})))]),((e.block||{}).attributes||{}).settings&&t("label",["Block settings:",t("pre",[JSON.stringify(e.block.attributes.settings,null,"  ")])])])}};return r}}},y=k,O=r(29),component=Object(O.a)(y,undefined,undefined,!1,null,null,null);e.default=component.exports}}]);